// Licensed to LinDB under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. LinDB licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatMetricsV1

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CompoundField struct {
	_tab flatbuffers.Table
}

func GetRootAsCompoundField(buf []byte, offset flatbuffers.UOffsetT) *CompoundField {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CompoundField{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCompoundField(buf []byte, offset flatbuffers.UOffsetT) *CompoundField {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CompoundField{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CompoundField) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CompoundField) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CompoundField) Min() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CompoundField) MutateMin(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

func (rcv *CompoundField) Max() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CompoundField) MutateMax(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *CompoundField) Sum() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CompoundField) MutateSum(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *CompoundField) Count() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *CompoundField) MutateCount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *CompoundField) ExplicitBounds(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *CompoundField) ExplicitBoundsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CompoundField) MutateExplicitBounds(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *CompoundField) Values(j int) float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *CompoundField) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *CompoundField) MutateValues(j int, n float64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func CompoundFieldStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func CompoundFieldAddMin(builder *flatbuffers.Builder, min float64) {
	builder.PrependFloat64Slot(0, min, 0.0)
}
func CompoundFieldAddMax(builder *flatbuffers.Builder, max float64) {
	builder.PrependFloat64Slot(1, max, 0.0)
}
func CompoundFieldAddSum(builder *flatbuffers.Builder, sum float64) {
	builder.PrependFloat64Slot(2, sum, 0.0)
}
func CompoundFieldAddCount(builder *flatbuffers.Builder, count float64) {
	builder.PrependFloat64Slot(3, count, 0.0)
}
func CompoundFieldAddExplicitBounds(builder *flatbuffers.Builder, explicitBounds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(explicitBounds), 0)
}
func CompoundFieldStartExplicitBoundsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func CompoundFieldAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(values), 0)
}
func CompoundFieldStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func CompoundFieldEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
